{
  "current_node_input": {
    "$": {
      "description": "Devuelve los datos de entrada del nodo actual",
      "parameters": {},
      "return_type": "any",
      "supported_in_code_node": false,
      "example": "// Acceder a los datos de entrada del nodo actual\n{{ $ }}\n// Resultado: { \"data\": { \"id\": 1, \"name\": \"Demo\" } }"
    },
    "$binary": {
      "description": "Acceso directo a $input.item.binary. Datos binarios entrantes de un nodo",
      "parameters": {},
      "return_type": "IBinaryData",
      "supported_in_code_node": false,
      "example": "// Acceder al contenido binario del campo 'data'\n{{ $binary.data }}\n// Resultado: <datos binarios>"
    },
    "$input": {
      "description": "Objeto que contiene todos los datos de entrada",
      "parameters": {
        "all()": {
          "description": "Devuelve todos los items de entrada",
          "optional": false,
          "type": "function"
        },
        "first()": {
          "description": "Devuelve el primer item de entrada",
          "optional": false,
          "type": "function"
        },
        "last()": {
          "description": "Devuelve el último item de entrada", 
          "optional": false,
          "type": "function"
        },
        "item": {
          "description": "El item actual siendo procesado",
          "optional": false,
          "type": "object"
        }
      },
      "return_type": "INodeExecutionData[]",
      "supported_in_code_node": true,
      "example": "// Acceder a todos los datos de entrada del nodo\n{{ $input }}\n// Resultado: [{ \"json\": { \"name\": \"Demo\" } }]"
    },
    "$input.item": {
      "description": "El elemento de entrada del nodo actual que se está procesando",
      "parameters": {},
      "return_type": "INodeExecutionData",
      "supported_in_code_node": true,
      "example": "// Acceder al campo 'name' del item actual\n{{ $input.item.json.name }}\n// Resultado: \"Demo\""
    },
    "$input.all()": {
      "description": "Todos los elementos de entrada en el nodo actual",
      "parameters": {},
      "return_type": "INodeExecutionData[]",
      "supported_in_code_node": true,
      "example": "// Acceder al campo 'email' del primer elemento\n{{ $input.all()[0].json.email }}\n// Resultado: \"ejemplo@correo.com\""
    },
    "$input.first()": {
      "description": "Primer elemento de entrada en el nodo actual",
      "parameters": {},
      "return_type": "INodeExecutionData",
      "supported_in_code_node": true,
      "example": "// Acceder al campo 'id' del primer elemento\n{{ $input.first().json.id }}\n// Resultado: 123"
    },
    "$input.last()": {
      "description": "Último elemento de entrada en el nodo actual", 
      "parameters": {},
      "return_type": "INodeExecutionData",
      "supported_in_code_node": true,
      "example": "// Acceder al campo 'timestamp' del último elemento\n{{ $input.last().json.timestamp }}\n// Resultado: \"2023-10-15T14:30:45.123Z\""
    },
    "$input.params": {
      "description": "Objeto que contiene la configuración de consulta del nodo anterior",
      "parameters": {},
      "return_type": "object",
      "supported_in_code_node": true,
      "example": "// Acceder al parámetro 'resource' configurado\n{{ $input.params.resource }}\n// Resultado: \"users\""
    },
    "$json": {
      "description": "Acceso directo a $input.item.json. Datos JSON entrantes de un nodo",
      "parameters": {},
      "return_type": "any",
      "supported_in_code_node": true,
      "example": "// Acceder a un dato llamado \"username\" del item actual\n{{ $json.username }}\n// Resultado: \"johndoe\""
    },
    "$input.context.noItemsLeft": {
      "description": "Booleano que indica si quedan elementos por procesar en el nodo Loop Over Items",
      "parameters": {},
      "return_type": "boolean",
      "supported_in_code_node": true,
      "example": "// Verificar si quedan más elementos por procesar\n{{ $input.context.noItemsLeft }}\n// Resultado: false"
    }
  },
  "output_of_other_nodes": {
    "$(node_name)": {
      "description": "Accede a los datos de salida de un nodo específico",
      "parameters": {
        "node_name": {
          "description": "Nombre del nodo del cual obtener datos",
          "type": "string",
          "optional": false
        }
      },
      "return_type": "any",
      "supported_in_code_node": false,
      "example": "// Acceder al campo 'data' de la respuesta JSON del nodo 'HTTP Request'\n{{ $(HTTP Request).json.data }}\n// Resultado: { \"id\": 1, \"name\": \"Producto\" }"
    },
    "$(node_name).item": {
      "description": "Accede al item actual del nodo especificado",
      "parameters": {
        "node_name": {
          "description": "Nombre del nodo del cual obtener el item",
          "type": "string",
          "optional": false
        }
      },
      "return_type": "INodeExecutionData",
      "supported_in_code_node": false,
      "example": "// Acceder al campo 'name' del item actual en el nodo 'Get Customer'\n{{ $(Get Customer).item.json.name }}\n// Resultado: \"María García\""
    },
    "$(node_name).all()": {
      "description": "Accede a todos los items del nodo especificado",
      "parameters": {
        "node_name": {
          "description": "Nombre del nodo del cual obtener todos los items",
          "type": "string",
          "optional": false
        }
      },
      "return_type": "INodeExecutionData[]",
      "supported_in_code_node": false,
      "example": "// Acceder al campo 'email' del primer item del nodo 'Filter Users'\n{{ $(Filter Users).all()[0].json.email }}\n// Resultado: \"usuario@ejemplo.com\""
    },
    "$('node-name').params": {
      "description": "Objeto que contiene la configuración de consulta del nodo especificado",
      "supported_in_code_node": true,
      "parameters": {},
      "return_type": "INodeParameters",
      "example": "// Acceder al parámetro 'url' configurado en el nodo 'HTTP Request'\n{{ $('HTTP Request').params.url }}\n// Resultado: \"https://api.ejemplo.com/data\""
    },
    "$('node-name').context": {
      "description": "Booleano. Solo disponible cuando se trabaja con el nodo Loop Over Items",
      "supported_in_code_node": true,
      "parameters": {},
      "return_type": "boolean",
      "example": "// Verificar si quedan más elementos por procesar en el nodo 'Loop Over Items'\n{{ $('Loop Over Items').context.noItemsLeft }}\n// Resultado: true"
    },
    "$('node-name').itemMatching": {
      "description": "Usar en lugar de $('node-name').item en el nodo Code si necesitas rastrear desde un item de entrada",
      "supported_in_code_node": true,
      "parameters": {
        "currentNodeInputIndex": {
          "type": "number",
          "optional": false,
          "description": "Índice del item de entrada actual"
        }
      },
      "return_type": "INodeExecutionData",
      "example": "// Obtener el ID del item correspondiente en el nodo anterior\n{{ $('Previous Node').itemMatching($input.itemIndex).json.id }}\n// Resultado: 42"
    }
  },
  "date_and_time": {
    "$now": {
      "description": "Devuelve la fecha y hora actual",
      "parameters": {},
      "return_type": "Date",
      "supported_in_code_node": true,
      "example": "// Obtener la fecha y hora actual\n{{ $now }}\n// Resultado: \"2023-10-15T14:30:45.123Z\""
    },
    "$today": {
      "description": "Devuelve la fecha actual a medianoche",
      "parameters": {},
      "return_type": "Date", 
      "supported_in_code_node": true,
      "example": "// Obtener la fecha actual a medianoche\n{{ $today }}\n// Resultado: \"2023-10-15T00:00:00.000Z\""
    },
    "$moment": {
      "description": "Accede a la librería moment.js para manipulación de fechas",
      "parameters": {
        "date": {
          "description": "Fecha a manipular",
          "type": "Date|string",
          "optional": true
        }
      },
      "return_type": "Moment",
      "supported_in_code_node": true,
      "example": "// Formatear una fecha del campo 'created_at'\n{{ $moment($json.created_at).format('DD/MM/YYYY') }}\n// Resultado: \"15/10/2023\""
    }
  },
  "jmespath": {
    "$jmespath": {
      "description": "Ejecuta consultas JMESPath en datos JSON",
      "parameters": {
        "data": {
          "description": "Datos JSON a consultar",
          "type": "object",
          "optional": false
        },
        "query": {
          "description": "Consulta JMESPath",
          "type": "string",
          "optional": false
        }
      },
      "return_type": "any",
      "supported_in_code_node": true,
      "example": "// Extraer nombres de usuarios mayores de 25 años\n{{ $jmespath($json.users, \"[?age > `25`].name\") }}\n// Resultado: [\"Juan\", \"María\", \"Carlos\"]"
    }
  },
  "http_node": {
    "$request": {
      "description": "Realiza peticiones HTTP",
      "parameters": {
        "url": {
          "description": "URL del endpoint",
          "type": "string",
          "optional": false
        },
        "method": {
          "description": "Método HTTP",
          "type": "string",
          "optional": true,
          "default": "GET"
        },
        "body": {
          "description": "Cuerpo de la petición",
          "type": "any",
          "optional": true
        },
        "headers": {
          "description": "Cabeceras HTTP",
          "type": "object",
          "optional": true
        }
      },
      "return_type": "Promise<IHttpRequestResult>",
      "supported_in_code_node": true,
      "example": "// Realizar una petición GET con token de autorización\n{{ $request('https://api.example.com/data', 'GET', {}, { 'Authorization': 'Bearer ' + $json.token }) }}\n// Resultado: { \"data\": { \"id\": 123, \"status\": \"active\" } }"
    }
  },
  "langchain_code_node": {},
  "n8n_metadata": {
    "$execution": {
      "description": "Información sobre la ejecución actual del workflow",
      "parameters": {},
      "return_type": "IExecuteWorkflowInfo",
      "supported_in_code_node": true,
      "example": "// Obtener el ID de la ejecución actual del workflow\n{{ $execution.id }}\n// Resultado: \"a12b3c45-6d78-9e0f-1g2h-3i4j5k6l7m8n\""
    },
    "$workflow": {
      "description": "Información sobre el workflow actual",
      "parameters": {},
      "return_type": "IWorkflowMetadata",
      "supported_in_code_node": true,
      "example": "// Obtener el ID del workflow actual\n{{ $workflow.id }}\n// Resultado: \"123\""
    },
    "$vars": {
      "description": "Variables definidas en el workflow",
      "parameters": {},
      "return_type": "object",
      "supported_in_code_node": true,
      "example": "// Acceder a una variable definida en el workflow\n{{ $vars.apiKey }}\n// Resultado: \"abc123xyz456\""
    }
  },
  "convenience_methods": {},
  
    "data_transformation_functions": {
      "arrays": {
        "average()": {
          "description": "Devuelve el valor medio de los elementos numéricos en un array",
          "parameters": {},
          "return_type": "number",
          "example": "// Promedio de un array de números\n// Valor inicial: $json.scores = [70, 80, 90]\n{{ $json.scores.average() }}\n// Resultado: 80"
        },
        "chunk()": {
          "description": "Divide un array en trozos de longitud dada",
          "parameters": {
            "size": {
              "description": "Tamaño de cada bloque",
              "type": "number",
              "optional": false
            }
          },
          "return_type": "array",
          "example": "// Dividir un array en bloques de 2 elementos\n// Valor inicial: $json.items = [1,2,3,4,5]\n{{ $json.items.chunk(2) }}\n// Resultado: [[1,2],[3,4],[5]]"
        },
        "compact()": {
          "description": "Elimina valores vacíos (false, null, 0, '', undefined, NaN) de un array",
          "parameters": {},
          "return_type": "array",
          "example": "// Eliminar valores vacíos\n// Valor inicial: $json.values = [0,1,false,2,null,3]\n{{ $json.values.compact() }}\n// Resultado: [1,2,3]"
        },
        "difference()": {
          "description": "Devuelve los valores del primer array que no están presentes en el segundo",
          "parameters": {
            "arr": {
              "description": "Array con el que comparar",
              "type": "array",
              "optional": false
            }
          },
          "return_type": "array",
          "example": "// Diferencia entre dos arrays\n// Valor inicial: $json.a = [1,2,3]\n// Valor inicial: $json.b = [3,4]\n{{ $json.a.difference($json.b) }}\n// Resultado: [1,2]"
        },
        "intersection()": {
          "description": "Devuelve los valores comunes entre dos arrays",
          "parameters": {
            "arr": {
              "description": "Array con el que comparar",
              "type": "array",
              "optional": false
            }
          },
          "return_type": "array",
          "example": "// Intersección de dos arrays\n// Valor inicial: $json.a = ['apple','orange']\n// Valor inicial: $json.b = ['orange','banana']\n{{ $json.a.intersection($json.b) }}\n// Resultado: ['orange']"
        },
        "first()": {
          "description": "Devuelve el primer elemento de un array",
          "parameters": {},
          "return_type": "any",
          "example": "// Primer elemento\n// Valor inicial: $json.list = ['a','b','c']\n{{ $json.list.first() }}\n// Resultado: 'a'"
        },
        "isEmpty()": {
          "description": "Comprueba si un array está vacío",
          "parameters": {},
          "return_type": "boolean",
          "example": "// Comprobar si vacío\n// Valor inicial: $json.emptyList = []\n{{ $json.emptyList.isEmpty() }}\n// Resultado: true"
        },
        "isNotEmpty()": {
          "description": "Comprueba si un array contiene elementos",
          "parameters": {},
          "return_type": "boolean",
          "example": "// Comprobar si NO está vacío\n// Valor inicial: $json.names = ['Ana']\n{{ $json.names.isNotEmpty() }}\n// Resultado: true"
        },
        "last()": {
          "description": "Devuelve el último elemento de un array",
          "parameters": {},
          "return_type": "any",
          "example": "// Último elemento\n// Valor inicial: $json.ids = [10,20,30]\n{{ $json.ids.last() }}\n// Resultado: 30"
        },
        "max()": {
          "description": "Devuelve el valor numérico máximo de un array",
          "parameters": {},
          "return_type": "number",
          "example": "// Máximo de un array\n// Valor inicial: $json.nums = [3,8,2]\n{{ $json.nums.max() }}\n// Resultado: 8"
        },
        "merge()": {
          "description": "Fusiona dos arrays de objetos combinando pares clave-valor",
          "parameters": {
            "arr": {
              "description": "Array para fusionar",
              "type": "array",
              "optional": false
            }
          },
          "return_type": "array",
          "example": "// Fusionar arrays de objetos\n// Valor inicial: $json.base = [{id:1,name:'A'}]\n// Valor inicial: $json.extra = [{id:1,age:30}]\n{{ $json.base.merge($json.extra) }}\n// Resultado: [{id:1,name:'A',age:30}]"
        },
        "min()": {
          "description": "Devuelve el valor numérico mínimo de un array",
          "parameters": {},
          "return_type": "number",
          "example": "// Mínimo de un array\n// Valor inicial: $json.nums = [3,8,2]\n{{ $json.nums.min() }}\n// Resultado: 2"
        },
        "pluck()": {
          "description": "Obtiene una lista de valores a partir de una clave de cada objeto del array",
          "parameters": {
            "fieldName": {
              "description": "Nombre de la clave a extraer",
              "type": "string",
              "optional": true
            }
          },
          "return_type": "array",
          "example": "// Extraer emails\n// Valor inicial: $json.users = [{email:'a@b.com'},{email:'c@d.com'}]\n{{ $json.users.pluck('email') }}\n// Resultado: ['a@b.com','c@d.com']"
        },
        "randomItem()": {
          "description": "Devuelve un elemento aleatorio del array",
          "parameters": {},
          "return_type": "any",
          "example": "// Obtener elemento aleatorio\n// Valor inicial: $json.colors = ['rojo','verde','azul']\n{{ $json.colors.randomItem() }}\n// Resultado: 'verde' (puede variar)"
        },
        "removeDuplicates()": {
          "description": "Elimina duplicados de un array (comparación superficial o por clave)",
          "parameters": {
            "key": {
              "description": "Clave opcional para comparar objetos",
              "type": "string",
              "optional": true
            }
          },
          "return_type": "array",
          "example": "// Eliminar duplicados\n// Valor inicial: $json.tags = ['n8n','js','n8n']\n{{ $json.tags.removeDuplicates() }}\n// Resultado: ['n8n','js']"
        },
        "renameKeys()": {
          "description": "Renombra claves coincidentes dentro de los objetos del array",
          "parameters": {
            "from": {
              "description": "Nombre actual de la clave",
              "type": "string",
              "optional": false
            },
            "to": {
              "description": "Nuevo nombre",
              "type": "string",
              "optional": false
            }
          },
          "return_type": "array",
          "example": "// Renombrar claves en objetos\n// Valor inicial: $json.people = [{fname:'Luis'}]\n{{ $json.people.renameKeys('fname','firstName') }}\n// Resultado: [{firstName:'Luis'}]"
        },
        "smartJoin()": {
          "description": "Convierte un array de objetos en un objeto clave-valor usando dos campos",
          "parameters": {
            "keyField": {
              "description": "Campo que se convertirá en clave",
              "type": "string",
              "optional": false
            },
            "nameField": {
              "description": "Campo que se convertirá en valor",
              "type": "string",
              "optional": false
            }
          },
          "return_type": "object",
          "example": "// smartJoin sobre tipo y nombre\n// Valor inicial: $json.list = [{type:'fruit',name:'apple'}]\n{{ $json.list.smartJoin('type','name') }}\n// Resultado: {fruit:'apple'}"
        },
        "sum()": {
          "description": "Suma todos los valores numéricos del array",
          "parameters": {},
          "return_type": "number",
          "example": "// Sumar valores\n// Valor inicial: $json.sales = [10,20,30]\n{{ $json.sales.sum() }}\n// Resultado: 60"
        },
        "toJsonString()": {
          "description": "Convierte el array en una cadena JSON (JSON.stringify)",
          "parameters": {},
          "return_type": "string",
          "example": "// Convertir a JSON\n// Valor inicial: $json.simple = [1,2]\n{{ $json.simple.toJsonString() }}\n// Resultado: '[1,2]'"
        },
        "union()": {
          "description": "Concatena dos arrays y elimina duplicados",
          "parameters": {
            "arr": {
              "description": "Array con el que unir",
              "type": "array",
              "optional": false
            }
          },
          "return_type": "array",
          "example": "// Unión de arrays\n// Valor inicial: $json.a = [1,2]\n// Valor inicial: $json.b = [2,3]\n{{ $json.a.union($json.b) }}\n// Resultado: [1,2,3]"
        },
        "unique()": {
          "description": "Alias de removeDuplicates: mantiene valores únicos",
          "parameters": {
            "key": {
              "description": "Clave opcional para comparar objetos",
              "type": "string",
              "optional": true
            }
          },
          "return_type": "array",
          "example": "// Valores únicos\n// Valor inicial: $json.ids = [1,1,2]\n{{ $json.ids.unique() }}\n// Resultado: [1,2]"
        },
        "append()": {
          "description": "Añade uno o más elementos al final del array (alias de push)",
          "parameters": {
            "values": {
              "description": "Valores a añadir (puede pasarse uno o varios)",
              "type": "any",
              "optional": false
            }
          },
          "return_type": "array",
          "example": "// Añadir elemento\n// Valor inicial: $json.list = [1,2]\n{{ $json.list.append(3) }}\n// Resultado: [1,2,3]"
        },
        "concat()": {
          "description": "Concatena el array con otro y devuelve un nuevo array",
          "parameters": {
            "arr": {
              "description": "Array a concatenar",
              "type": "array",
              "optional": false
            }
          },
          "return_type": "array",
          "example": "// Concatenar arrays\n// Valor inicial: $json.a = [1]\n// Valor inicial: $json.b = [2,3]\n{{ $json.a.concat($json.b) }}\n// Resultado: [1,2,3]"
        },
        "filter()": {
          "description": "Devuelve un nuevo array con los elementos que cumplen la condición indicada (predicado)",
          "parameters": {
            "predicate": {
              "description": "Función predicado (elemento, índice) => boolean",
              "type": "function",
              "optional": false
            }
          },
          "return_type": "array",
          "example": "// Filtrar pares\n// Valor inicial: $json.nums = [1,2,3,4]\n{{ $json.nums.filter(num => num % 2 === 0) }}\n// Resultado: [2,4]"
        },
        "find()": {
          "description": "Devuelve el primer elemento que cumple la condición indicada",
          "parameters": {
            "predicate": {
              "description": "Función predicado (elemento, índice) => boolean",
              "type": "function",
              "optional": false
            }
          },
          "return_type": "any",
          "example": "// Encontrar primer número par\n// Valor inicial: $json.nums = [1,3,4,6]\n{{ $json.nums.find(num => num % 2 === 0) }}\n// Resultado: 4"
        },
        "includes()": {
          "description": "Comprueba si el array contiene el valor especificado",
          "parameters": {
            "value": {
              "description": "Valor a buscar",
              "type": "any",
              "optional": false
            }
          },
          "return_type": "boolean",
          "example": "// ¿Incluye 3?\n// Valor inicial: $json.ids = [1,2,3]\n{{ $json.ids.includes(3) }}\n// Resultado: true"
        },
        "indexOf()": {
          "description": "Devuelve el índice de la primera aparición del valor dado (-1 si no existe)",
          "parameters": {
            "value": {
              "description": "Valor a buscar",
              "type": "any",
              "optional": false
            }
          },
          "return_type": "number",
          "example": "// Índice de 'b'\n// Valor inicial: $json.letters = ['a','b','c']\n{{ $json.letters.indexOf('b') }}\n// Resultado: 1"
        },
        "join()": {
          "description": "Une todos los elementos en una cadena separada por el delimitador dado",
          "parameters": {
            "separator": {
              "description": "Delimitador (opcional)",
              "type": "string",
              "optional": true,
              "default": ","
            }
          },
          "return_type": "string",
          "example": "// Unir con guiones\n// Valor inicial: $json.words = ['n8n','rocks']\n{{ $json.words.join('-') }}\n// Resultado: 'n8n-rocks'"
        },
        "length": {
          "description": "Número de elementos del array (atributo)",
          "parameters": {},
          "return_type": "number",
          "example": "// Longitud\n// Valor inicial: $json.tags = ['a','b']\n{{ $json.tags.length }}\n// Resultado: 2"
        },
        "map()": {
          "description": "Crea un nuevo array con los resultados de aplicar la función indicada a cada elemento",
          "parameters": {
            "mapper": {
              "description": "Función de mapeo (elemento, índice) => any",
              "type": "function",
              "optional": false
            }
          },
          "return_type": "array",
          "example": "// Duplicar números\n// Valor inicial: $json.nums = [1,2]\n{{ $json.nums.map(n => n * 2) }}\n// Resultado: [2,4]"
        },
        "reduce()": {
          "description": "Aplica una función acumuladora sobre los elementos y devuelve el valor resultante",
          "parameters": {
            "reducer": {
              "description": "Función acumuladora (acum, elem) => any",
              "type": "function",
              "optional": false
            },
            "initial": {
              "description": "Valor inicial para el acumulador (opcional)",
              "type": "any",
              "optional": true
            }
          },
          "return_type": "any",
          "example": "// Sumar números\n// Valor inicial: $json.nums = [1,2,3]\n{{ $json.nums.reduce((acc,n)=>acc+n,0) }}\n// Resultado: 6"
        },
        "reverse()": {
          "description": "Invierte el orden de los elementos del array in situ",
          "parameters": {},
          "return_type": "array",
          "example": "// Invertir\n// Valor inicial: $json.ids = [1,2,3]\n{{ $json.ids.reverse() }}\n// Resultado: [3,2,1]"
        },
        "slice()": {
          "description": "Extrae una sección del array y devuelve un nuevo array",
          "parameters": {
            "start": { "description": "Índice inicial (opcional)", "type": "number", "optional": true },
            "end": { "description": "Índice final (opcional)", "type": "number", "optional": true }
          },
          "return_type": "array",
          "example": "// Extraer primeros 2\n// Valor inicial: $json.ids = [1,2,3]\n{{ $json.ids.slice(0,2) }}\n// Resultado: [1,2]"
        },
        "sort()": {
          "description": "Ordena los elementos del array in situ (opcionalmente usando comparador)",
          "parameters": {
            "comparator": { "description": "Función comparadora opcional", "type": "function", "optional": true }
          },
          "return_type": "array",
          "example": "// Orden descendente\n// Valor inicial: $json.ids = [3,1,2]\n{{ $json.ids.sort((a,b)=>b-a) }}\n// Resultado: [3,2,1]"
        },
        "toSpliced()": {
          "description": "Devuelve una copia del array con las modificaciones de splice() sin mutar el original (ES2023)",
          "parameters": {
            "start": { "description": "Índice inicial", "type": "number", "optional": false },
            "deleteCount": { "description": "Cantidad de elementos a eliminar", "type": "number", "optional": false },
            "items": { "description": "Elementos a insertar", "type": "any", "optional": true }
          },
          "return_type": "array",
          "example": "// Eliminar 1 y añadir X\n// Valor inicial: $json.ids = [1,2,3]\n{{ $json.ids.toSpliced(1,1,'X') }}\n// Resultado: [1,'X',3]"
        }
      },
      "booleans": {
        "isBoolean()": {
          "description": "Verifica si un valor es booleano",
          "parameters": {
            "value": {
              "description": "Valor a verificar",
              "type": "any",
              "optional": false
            }
          },
          "return_type": "boolean",
          "example": "// Verificar si el valor es un booleano\n{{ $json.status.isBoolean() }}\n// Resultado: true"
        },
        "negate()": {
          "description": "Niega un valor booleano",
          "parameters": {
            "boolean": {
              "description": "Valor booleano a negar",
              "type": "boolean",
              "optional": false
            }
          },
          "return_type": "boolean",
          "example": "// Invertir el valor booleano\n{{ $json.isActive.negate() }}\n// Resultado: false"
        },
        "toNumber()": {
          "description": "Convierte un booleano a un número (1 para true, 0 para false)",
          "parameters": {
            "boolean": {
              "description": "Booleano a convertir",
              "type": "boolean",
              "optional": false
            }
          },
          "return_type": "number",
          "example": "// Convertir un booleano a número\n{{ $json.completed.toNumber() }}\n// Resultado: 1"
        },
        "toString()": {
          "description": "Convierte un booleano a string ('true' o 'false')",
          "parameters": {
            "boolean": {
              "description": "Booleano a convertir",
              "type": "boolean",
              "optional": false
            }
          },
          "return_type": "string",
          "example": "// Convertir un booleano a cadena de texto\n{{ $json.isPremium.toString() }}\n// Resultado: \"true\""
        }
      },
      "dates": {
        "beginningOf()": {
          "description": "Devuelve la fecha al inicio de la unidad de tiempo especificada (por defecto, inicio de semana)",
          "parameters": {
            "unit": {
              "description": "Unidad de tiempo: second, minute, hour, day, week, month o year (opcional)",
              "type": "string",
              "optional": true,
              "default": "week"
            }
          },
          "return_type": "Date",
          "example": "// Inicio de mes\n// Valor inicial: $json.invoiceDate = \"2024-05-15T13:45:00Z\"\n{{ $json.invoiceDate.beginningOf('month') }}\n// Resultado: \"2024-05-01T00:00:00.000Z\""
        },
        "endOfMonth()": {
          "description": "Devuelve la fecha ajustada al último instante del mes de la fecha dada",
          "parameters": {},
          "return_type": "Date",
          "example": "// Fin de mes\n// Valor inicial: $json.reportDate = \"2024-02-10T09:00:00Z\"\n{{ $json.reportDate.endOfMonth() }}\n// Resultado: \"2024-02-29T23:59:59.999Z\""
        },
        "extract()": {
          "description": "Extrae la parte indicada (unidad temporal) de una fecha y la devuelve como número",
          "parameters": {
            "datePart": {
              "description": "Unidad de tiempo a extraer: second, minute, hour, day, week, month o year (opcional)",
              "type": "string",
              "optional": true,
              "default": "week"
            }
          },
          "return_type": "number",
          "example": "// Extraer día del mes\n// Valor inicial: $json.birthday = \"2024-05-15T13:45:00Z\"\n{{ $json.birthday.extract('day') }}\n// Resultado: 15"
        },
        "format()": {
          "description": "Formatea una fecha según el patrón especificado (Luxon tokens)",
          "parameters": {
            "fmt": {
              "description": "Patrón de formato (obligatorio)",
              "type": "string",
              "optional": false
            }
          },
          "return_type": "string",
          "example": "// Formatear fecha\n// Valor inicial: $json.eventDate = \"2024-05-15T13:45:00Z\"\n{{ $json.eventDate.format('yyyy LLL dd') }}\n// Resultado: \"2024 May 15\""
        },
        "isBetween()": {
          "description": "Comprueba si la fecha está entre dos fechas dadas",
          "parameters": {
            "date1": { "description": "Fecha inicial del rango", "type": "Date", "optional": false },
            "date2": { "description": "Fecha final del rango", "type": "Date", "optional": false }
          },
          "return_type": "boolean",
          "example": "// Verificar rango de fechas\n// Valor inicial: $json.today = \"2024-05-20T00:00:00Z\"\n//                $json.start = \"2024-05-15T00:00:00Z\"\n//                $json.end   = \"2024-05-31T23:59:59Z\"\n{{ $json.today.isBetween($json.start, $json.end) }}\n// Resultado: true"
        },
        "isDst()": {
          "description": "Indica si la fecha está en horario de verano (DST)",
          "parameters": {},
          "return_type": "boolean",
          "example": "// ¿Está en horario de verano?\n// Valor inicial: $json.date = \"2024-06-01T12:00:00Z\"\n{{ $json.date.isDst() }}\n// Resultado: true"
        },
        "isInLast()": {
          "description": "Comprueba si la fecha está dentro del período de tiempo indicado contado hacia atrás desde ahora",
          "parameters": {
            "n": { "description": "Cantidad de unidades", "type": "number", "optional": true, "default": 0 },
            "unit": { "description": "Unidad de tiempo: second, minute, hour, day, week, month o year (opcional)", "type": "string", "optional": true, "default": "minutes" }
          },
          "return_type": "boolean",
          "example": "// ¿Está en los últimos 7 días?\n// Valor inicial: $json.commentDate = \"2024-05-09T10:00:00Z\"\n{{ $json.commentDate.isInLast(7, 'days') }}\n// Resultado: true"
        },
        "isWeekend()": {
          "description": "Devuelve true si la fecha cae en sábado o domingo",
          "parameters": {},
          "return_type": "boolean",
          "example": "// ¿Es fin de semana?\n// Valor inicial: $json.date = \"2024-05-11T12:00:00Z\"\n{{ $json.date.isWeekend() }}\n// Resultado: true"
        },
        "minus()": {
          "description": "Resta la cantidad de tiempo indicada a la fecha",
          "parameters": {
            "n": { "description": "Cantidad de unidades a restar", "type": "number", "optional": false },
            "unit": { "description": "Unidad de tiempo: second, minute, hour, day, week, month o year (opcional)", "type": "string", "optional": true, "default": "milliseconds" }
          },
          "return_type": "Date",
          "example": "// Restar 2 horas\n// Valor inicial: $json.meetingDate = \"2024-05-15T13:45:00Z\"\n{{ $json.meetingDate.minus(2, 'hours') }}\n// Resultado: \"2024-05-15T11:45:00.000Z\""
        },
        "plus()": {
          "description": "Suma la cantidad de tiempo indicada a la fecha",
          "parameters": {
            "n": { "description": "Cantidad de unidades a sumar", "type": "number", "optional": false },
            "unit": { "description": "Unidad de tiempo: second, minute, hour, day, week, month o year (opcional)", "type": "string", "optional": true, "default": "milliseconds" }
          },
          "return_type": "Date",
          "example": "// Añadir 1 semana\n// Valor inicial: $json.deadline = \"2024-05-01T00:00:00Z\"\n{{ $json.deadline.plus(1, 'week') }}\n// Resultado: \"2024-05-08T00:00:00.000Z\""
        },
        "toDateTime()": {
          "description": "Convierte una fecha JavaScript a un objeto Luxon DateTime",
          "parameters": {},
          "return_type": "Date",
          "example": "// Convertir a DateTime (Luxon)\n// Valor inicial: $json.stringDate = \"2024-05-15T13:45:00Z\"\n{{ $json.stringDate.toDateTime() }}\n// Resultado: DateTime(2024-05-15T13:45:00.000Z)"
        }
      },
      "numbers": {
        "abs()": {
          "description": "Devuelve el valor absoluto de un número",
          "parameters": {},
          "return_type": "number",
          "example": "// Valor absoluto\n// Valor inicial: $json.delta = -42\n{{ $json.delta.abs() }}\n// Resultado: 42"
        },
        "isInteger()": {
          "description": "Devuelve true si el número es un entero (sin decimales)",
          "parameters": {},
          "return_type": "boolean",
          "example": "// ¿Es entero?\n// Valor inicial: $json.age = 30\n{{ $json.age.isInteger() }}\n// Resultado: true"
        },
        "toLocaleString()": {
          "description": "Convierte el número a cadena según la configuración regional especificada (Intl.NumberFormat)",
          "parameters": {
            "locales": {
              "description": "Etiqueta de idioma IETF BCP 47 (opcional)",
              "type": "string",
              "optional": true,
              "default": "en-US"
            },
            "options": {
              "description": "Objeto de opciones para Intl.NumberFormat (opcional)",
              "type": "object",
              "optional": true
            }
          },
          "return_type": "string",
          "example": "// toLocaleString español\n// Valor inicial: $json.population = 1234567.89\n{{ $json.population.toLocaleString('es-ES', { maximumFractionDigits: 2 }) }}\n// Resultado: '1.234.567,89'"
        },
        "toString()": {
          "description": "Convierte el número a una cadena de texto",
          "parameters": {},
          "return_type": "string",
          "example": "// a string\n// Valor inicial: $json.id = 123\n{{ $json.id.toString() }}\n// Resultado: '123'"
        },
        "ceil()": {
          "description": "Redondea un número hacia arriba al entero más cercano",
          "parameters": {},
          "return_type": "number",
          "example": "// Redondear hacia arriba\n// Valor inicial: $json.total = 4.2\n{{ $json.total.ceil() }}\n// Resultado: 5"
        },
        "floor()": {
          "description": "Redondea un número hacia abajo al entero más cercano",
          "parameters": {},
          "return_type": "number",
          "example": "// Redondear hacia abajo\n// Valor inicial: $json.rating = 4.9\n{{ $json.rating.floor() }}\n// Resultado: 4"
        },
        "format()": {
          "description": "Envuelve Intl.NumberFormat() y devuelve el número formateado como cadena",
          "parameters": {
            "locales": {
              "description": "Etiqueta de idioma IETF BCP 47 (opcional)",
              "type": "string",
              "optional": true,
              "default": "en-US"
            },
            "options": {
              "description": "Objeto de opciones para Intl.NumberFormat (opcional)",
              "type": "object",
              "optional": true
            }
          },
          "return_type": "string",
          "example": "// Formatear número en estilo moneda español\n// Valor inicial: $json.amount = 1234.5\n{{ $json.amount.format('es-ES', { style: 'currency', currency: 'EUR' }) }}\n// Resultado: \"1.234,50 €\""
        },
        "isEven()": {
          "description": "Devuelve true si el número es par (solo números enteros)",
          "parameters": {},
          "return_type": "boolean",
          "example": "// ¿Es par?\n// Valor inicial: $json.quantity = 8\n{{ $json.quantity.isEven() }}\n// Resultado: true"
        },
        "isOdd()": {
          "description": "Devuelve true si el número es impar (solo números enteros)",
          "parameters": {},
          "return_type": "boolean",
          "example": "// ¿Es impar?\n// Valor inicial: $json.day = 7\n{{ $json.day.isOdd() }}\n// Resultado: true"
        },
        "round()": {
          "description": "Redondea el número al entero más cercano o a los decimales indicados",
          "parameters": {
            "decimalPlaces": {
              "description": "Cantidad de decimales (opcional)",
              "type": "number",
              "optional": true,
              "default": 0
            }
          },
          "return_type": "number",
          "example": "// Redondear a 2 decimales\n// Valor inicial: $json.pi = 3.14159\n{{ $json.pi.round(2) }}\n// Resultado: 3.14"
        },
        "toBoolean()": {
          "description": "Convierte un número a booleano (0 → false, cualquier otro → true)",
          "parameters": {},
          "return_type": "boolean",
          "example": "// Convertir a booleano\n// Valor inicial: $json.flag = 0\n{{ $json.flag.toBoolean() }}\n// Resultado: false"
        },
        "toDateTime()": {
          "description": "Convierte un número a objeto Luxon DateTime según el formato indicado",
          "parameters": {
            "format": {
              "description": "Formato de origen: 'ms', 's' o 'excel' (opcional)",
              "type": "string",
              "optional": true,
              "default": "ms"
            }
          },
          "return_type": "Date",
          "example": "// Convertir timestamp en segundos a DateTime\n// Valor inicial: $json.ts = 1715884800\n{{ $json.ts.toDateTime('s') }}\n// Resultado: DateTime(2024-05-17T00:00:00.000Z)"
        }
      },
      "objects": {
        "isEmpty()": {
          "description": "Comprueba si el objeto no contiene pares clave-valor",
          "parameters": {},
          "return_type": "boolean",
          "example": "// ¿Está vacío?\n// Valor inicial: $json.meta = {}\n{{ $json.meta.isEmpty() }}\n// Resultado: true"
        },
        "merge()": {
          "description": "Fusiona dos objetos; si existen claves duplicadas, prevalece el objeto base",
          "parameters": {
            "object": {
              "description": "Objeto a fusionar con el objeto base",
              "type": "object",
              "optional": false
            }
          },
          "return_type": "object",
          "example": "// Unir configuraciones\n// Valor inicial: $json.base = {theme:'dark'}\n// Valor inicial: $json.extra = {lang:'es'}\n{{ $json.base.merge($json.extra) }}\n// Resultado: {theme:'dark',lang:'es'}"
        },
        "hasField()": {
          "description": "Verifica si el objeto contiene la clave indicada (solo nivel superior)",
          "parameters": {
            "fieldName": {
              "description": "Nombre de la clave a buscar",
              "type": "string",
              "optional": false
            }
          },
          "return_type": "boolean",
          "example": "// ¿Tiene la clave 'email'?\n// Valor inicial: $json.user = {name:'Ana',email:'ana@ej.com'}\n{{ $json.user.hasField('email') }}\n// Resultado: true"
        },
        "removeField()": {
          "description": "Elimina la clave indicada del objeto (solo nivel superior)",
          "parameters": {
            "key": {
              "description": "Clave a eliminar",
              "type": "string",
              "optional": false
            }
          },
          "return_type": "object",
          "example": "// Quitar la clave 'password'\n// Valor inicial: $json.account = {user:'luis',password:'123'}\n{{ $json.account.removeField('password') }}\n// Resultado: {user:'luis'}"
        },
        "removeFieldsContaining()": {
          "description": "Elimina las claves cuyo valor coincida con el valor indicado",
          "parameters": {
            "value": {
              "description": "Valor a buscar para eliminar",
              "type": "string",
              "optional": false
            }
          },
          "return_type": "object",
          "example": "// Eliminar campos con valor vacío\n// Valor inicial: $json.profile = {name:'Ana',bio:''}\n{{ $json.profile.removeFieldsContaining('') }}\n// Resultado: {name:'Ana'}"
        },
        "keepFieldsContaining()": {
          "description": "Mantiene únicamente las claves cuyo valor coincida con el valor indicado",
          "parameters": {
            "value": {
              "description": "Valor a conservar",
              "type": "string",
              "optional": false
            }
          },
          "return_type": "object",
          "example": "// Conservar campos con valor 'active'\n// Valor inicial: $json.status = {user:'active',admin:'inactive'}\n{{ $json.status.keepFieldsContaining('active') }}\n// Resultado: {user:'active'}"
        },
        "compact()": {
          "description": "Elimina valores vacíos (null, undefined, '', etc.) del objeto",
          "parameters": {},
          "return_type": "object",
          "example": "// Compactar objeto\n// Valor inicial: $json.data = {name:'Ana',age:null,city:''}\n{{ $json.data.compact() }}\n// Resultado: {name:'Ana'}"
        },
        "toJsonString()": {
          "description": "Convierte el objeto en una cadena JSON (equivalente a JSON.stringify)",
          "parameters": {},
          "return_type": "string",
          "example": "// Convertir a JSON string\n// Valor inicial: $json.item = {id:1,name:'Desk'}\n{{ $json.item.toJsonString() }}\n// Resultado: '{\"id\":1,\"name\":\"Desk\"}'"
        },
        "urlEncode()": {
          "description": "Convierte el objeto en una cadena de parámetros URL (solo claves nivel superior)",
          "parameters": {},
          "return_type": "string",
          "example": "// URL encode\n// Valor inicial: $json.params = {q:'n8n',page:2}\n{{ $json.params.urlEncode() }}\n// Resultado: 'q=n8n&page=2'"
        },
        "keys()": {
          "description": "Devuelve un array con los nombres de las claves del objeto (Object.keys)",
          "parameters": {},
          "return_type": "array",
          "example": "// Claves del objeto\n// Valor inicial: $json.user = {id:1,name:'Ana'}\n{{ $json.user.keys() }}\n// Resultado: ['id','name']"
        },
        "values()": {
          "description": "Devuelve un array con los valores de las claves del objeto (Object.values)",
          "parameters": {},
          "return_type": "array",
          "example": "// Valores del objeto\n// Valor inicial: $json.user = {id:1,name:'Ana'}\n{{ $json.user.values() }}\n// Resultado: [1,'Ana']"
        },
        "isNotEmpty()": {
          "description": "Devuelve true si el objeto tiene al menos una clave",
          "parameters": {},
          "return_type": "boolean",
          "example": "// ¿No está vacío?\n// Valor inicial: $json.profile = {bio:'Hola'}\n{{ $json.profile.isNotEmpty() }}\n// Resultado: true"
        }
      },
      "strings": {
        "base64Encode()": {
          "description": "Codifica la cadena usando base64",
          "parameters": {},
          "return_type": "string",
          "example": "// Base64 encode\n// Valor inicial: $json.password = 'secret'\n{{ $json.password.base64Encode() }}\n// Resultado: 'c2VjcmV0'"
        },
        "base64Decode()": {
          "description": "Decodifica una cadena base64 a texto plano",
          "parameters": {},
          "return_type": "string",
          "example": "// Base64 decode\n// Valor inicial: $json.encoded = 'c2VjcmV0'\n{{ $json.encoded.base64Decode() }}\n// Resultado: 'secret'"
        },
        "extractDomain()": {
          "description": "Extrae el dominio de una URL contenida en la cadena (undefined si no existe)",
          "parameters": {},
          "return_type": "string",
          "example": "// Extraer dominio\n// Valor inicial: $json.url = 'https://docs.n8n.io/guide'\n{{ $json.url.extractDomain() }}\n// Resultado: 'docs.n8n.io'"
        },
        "extractEmail()": {
          "description": "Extrae el primer email encontrado en la cadena (undefined si no existe)",
          "parameters": {},
          "return_type": "string",
          "example": "// Extraer email\n// Valor inicial: $json.text = 'Contacto: user@example.com'\n{{ $json.text.extractEmail() }}\n// Resultado: 'user@example.com'"
        },
        "extractUrl()": {
          "description": "Extrae la primera URL encontrada en la cadena (undefined si no existe)",
          "parameters": {},
          "return_type": "string",
          "example": "// Extraer URL\n// Valor inicial: $json.message = 'Visita https://n8n.io ahora'\n{{ $json.message.extractUrl() }}\n// Resultado: 'https://n8n.io'"
        },
        "extractUrlPath()": {
          "description": "Extrae solo la ruta de la URL presente en la cadena (sin dominio raíz)",
          "parameters": {},
          "return_type": "string",
          "example": "// Extraer ruta\n// Valor inicial: $json.link = 'https://example.com/products/123'\n{{ $json.link.extractUrlPath() }}\n// Resultado: '/products/123'"
        },
        "hash()": {
          "description": "Genera un hash de la cadena con el algoritmo indicado",
          "parameters": {
            "algo": {
              "description": "Algoritmo: md5, base64, sha1, sha224, sha256, sha384, sha512, sha3 o ripemd160 (opcional)",
              "type": "string",
              "optional": true,
              "default": "md5"
            }
          },
          "return_type": "string",
          "example": "// Hash SHA-256\n// Valor inicial: $json.token = 'abc123'\n{{ $json.token.hash('sha256') }}\n// Resultado: '6ca13d52ca70c883e0f0bb101e425a89e8624de51db2d2392593af6a84118090'"
        },
        "isDomain()": {
          "description": "Comprueba si la cadena es un dominio válido",
          "parameters": {},
          "return_type": "boolean",
          "example": "// ¿Es dominio?\n// Valor inicial: $json.str = 'n8n.io'\n{{ $json.str.isDomain() }}\n// Resultado: true"
        },
        "isEmail()": {
          "description": "Comprueba si la cadena es un email válido",
          "parameters": {},
          "return_type": "boolean",
          "example": "// ¿Es email?\n// Valor inicial: $json.addr = 'info@n8n.io'\n{{ $json.addr.isEmail() }}\n// Resultado: true"
        },
        "isEmpty()": {
          "description": "Devuelve true si la cadena está vacía",
          "parameters": {},
          "return_type": "boolean",
          "example": "// ¿Está vacía?\n// Valor inicial: $json.comment = ''\n{{ $json.comment.isEmpty() }}\n// Resultado: true"
        },
        "isNotEmpty()": {
          "description": "Devuelve true si la cadena tiene contenido",
          "parameters": {},
          "return_type": "boolean",
          "example": "// ¿Tiene contenido?\n// Valor inicial: $json.note = 'hola'\n{{ $json.note.isNotEmpty() }}\n// Resultado: true"
        },
        "isNumeric()": {
          "description": "Devuelve true si la cadena contiene solo dígitos",
          "parameters": {},
          "return_type": "boolean",
          "example": "// ¿Es numérica?\n// Valor inicial: $json.code = '12345'\n{{ $json.code.isNumeric() }}\n// Resultado: true"
        },
        "isUrl()": {
          "description": "Comprueba si la cadena es una URL válida",
          "parameters": {},
          "return_type": "boolean",
          "example": "// ¿Es URL?\n// Valor inicial: $json.ref = 'https://n8n.io'\n{{ $json.ref.isUrl() }}\n// Resultado: true"
        },
        "parseJson()": {
          "description": "Analiza la cadena como JSON (equivalente a JSON.parse)",
          "parameters": {},
          "return_type": "object",
          "example": "// Parsear JSON\n// Valor inicial: $json.raw = '{\"id\":1}'\n{{ $json.raw.parseJson() }}\n// Resultado: { id: 1 }"
        },
        "quote()": {
          "description": "Envuelve la cadena en el tipo de comillas indicado",
          "parameters": {
            "mark": {
              "description": "Carácter de comilla a usar (opcional)",
              "type": "string",
              "optional": true,
              "default": "\""
            }
          },
          "return_type": "string",
          "example": "// Poner comillas simples\\n// Valor inicial: $json.word = hola\\n{{ $json.word.quote(\"'\") }}\\n// Resultado: \"'hola'\""
        },
        "removeMarkdown()": {
          "description": "Elimina formato Markdown de la cadena",
          "parameters": {},
          "return_type": "string",
          "example": "// Quitar Markdown\n// Valor inicial: $json.md = '**negrita**'\n{{ $json.md.removeMarkdown() }}\n// Resultado: 'negrita'"
        },
        "replaceSpecialChars()": {
          "description": "Reemplaza caracteres no ASCII por su versión ASCII",
          "parameters": {},
          "return_type": "string",
          "example": "// Reemplazar especiales\n// Valor inicial: $json.title = 'Aplicación'\n{{ $json.title.replaceSpecialChars() }}\n// Resultado: 'Aplicacion'"
        },
        "removeTags()": {
          "description": "Elimina etiquetas HTML o XML de la cadena",
          "parameters": {},
          "return_type": "string",
          "example": "// Quitar etiquetas\n// Valor inicial: $json.html = '<b>Hola</b>'\n{{ $json.html.removeTags() }}\n// Resultado: 'Hola'"
        },
        "toBoolean()": {
          "description": "Convierte la cadena a booleano (\"false\", \"0\", \"\", y \"no\" → false)",
          "parameters": {},
          "return_type": "boolean",
          "example": "// A booleano\n// Valor inicial: $json.flag = 'no'\n{{ $json.flag.toBoolean() }}\n// Resultado: false"
        },
        "toDateTime()": {
          "description": "Convierte la cadena a un objeto Luxon DateTime",
          "parameters": {},
          "return_type": "Date",
          "example": "// A DateTime\n// Valor inicial: $json.dateStr = '2024-05-17T10:00:00Z'\n{{ $json.dateStr.toDateTime() }}\n// Resultado: DateTime(2024-05-17T10:00:00.000Z)"
        },
        "toDecimalNumber()": {
          "description": "Convierte la cadena a número decimal (alias de toFloat)",
          "parameters": {},
          "return_type": "number",
          "example": "// A decimal\n// Valor inicial: $json.price = '12.99'\n{{ $json.price.toDecimalNumber() }}\n// Resultado: 12.99"
        },
        "toFloat()": {
          "description": "Convierte la cadena a número decimal",
          "parameters": {},
          "return_type": "number",
          "example": "// A float\n// Valor inicial: $json.coord = '3.14159'\n{{ $json.coord.toFloat() }}\n// Resultado: 3.14159"
        },
        "toInt()": {
          "description": "Convierte la cadena a entero",
          "parameters": {},
          "return_type": "number",
          "example": "// A entero\n// Valor inicial: $json.qty = '42'\n{{ $json.qty.toInt() }}\n// Resultado: 42"
        },
        "toSentenceCase()": {
          "description": "Convierte la cadena a formato oración",
          "parameters": {},
          "return_type": "string",
          "example": "// A oración\n// Valor inicial: $json.text = 'hola mundo'\n{{ $json.text.toSentenceCase() }}\n// Resultado: 'Hola mundo'"
        },
        "toSnakeCase()": {
          "description": "Convierte la cadena a snake_case",
          "parameters": {},
          "return_type": "string",
          "example": "// A snake_case\n// Valor inicial: $json.field = 'Nombre De Usuario'\n{{ $json.field.toSnakeCase() }}\n// Resultado: 'nombre_de_usuario'"
        },
        "toTitleCase()": {
          "description": "Convierte la cadena a Title Case (mantiene mayúsculas existentes)",
          "parameters": {},
          "return_type": "string",
          "example": "// A Title Case\n// Valor inicial: $json.heading = 'la casa de papel'\n{{ $json.heading.toTitleCase() }}\n// Resultado: 'La Casa De Papel'"
        },
        "toWholeNumber()": {
          "description": "Convierte la cadena a número entero",
          "parameters": {},
          "return_type": "number",
          "example": "// A número entero\n// Valor inicial: $json.count = '123'\n{{ $json.count.toWholeNumber() }}\n// Resultado: 123"
        },
        "urlDecode()": {
          "description": "Decodifica caracteres percent-encoded en la cadena",
          "parameters": {
            "entireString": {
              "description": "Decodificar también caracteres de sintaxis URI (opcional)",
              "type": "boolean",
              "optional": true
            }
          },
          "return_type": "string",
          "example": "// URL decode\n// Valor inicial: $json.enc = 'hello%20world'\n{{ $json.enc.urlDecode() }}\n// Resultado: 'hello world'"
        },
        "urlEncode()": {
          "description": "Codifica la cadena para uso en URL",
          "parameters": {
            "entireString": {
              "description": "Codificar también caracteres de sintaxis URI (opcional)",
              "type": "boolean",
              "optional": true
            }
          },
          "return_type": "string",
          "example": "// URL encode\n// Valor inicial: $json.query = 'hello world'\n{{ $json.query.urlEncode() }}\n// Resultado: 'hello%20world'"
        }
      }
    }
  
} 